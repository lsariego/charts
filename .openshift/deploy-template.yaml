kind: Template
apiVersion: v1
metadata:
  name: deploy-react-app
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
<<<<<<< HEAD
    creationTimestamp: null
=======
    creationTimonthtamp: null
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
<<<<<<< HEAD
    namespace: ${APP_NAMESPACE}
=======
    namonthpace: ${APP_NAmonthPACE}
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
<<<<<<< HEAD
        creationTimestamp: null
=======
        creationTimonthtamp: null
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
<<<<<<< HEAD
          - image: docker-registry.default.svc:5000/${APP_NAMESPACE}/${APP_NAME}
=======
          - image: docker-registry.default.svc:5000/${APP_NAmonthPACE}/${APP_NAME}
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
            resources: {}
<<<<<<< HEAD
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
=======
            terminationmessagePath: /dev/termination-log
            terminationmessagePolicy: File
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
<<<<<<< HEAD
        containerNames:
=======
        containerNamonth:
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
<<<<<<< HEAD
    namespace: ${APP_NAMESPACE}
=======
    namonthpace: ${APP_NAmonthPACE}
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
  spec:
    ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      mercadopublico: ${APP_SSL_MERCADOPUBLICO}
      chilecompra: ${APP_SSL_CHILECOMPRA}
    name: ${APP_NAME}-short
  spec:
    host: ${APP_ROUTE}
    path: ${APP_PATH}
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
  status: {}

parameters:
- name: APP_NAME
  required: true
  value: "datos-abiertos-frontend"
- name: APP_ROUTE
  required: true
- name: APP_PATH
  required: true
<<<<<<< HEAD
- name: APP_NAMESPACE
=======
- name: APP_NAmonthPACE
>>>>>>> fc7735d5ffaacc64864999711204d558c13ca139
  required: true
- name: APP_SSL_MERCADOPUBLICO
  required: true
- name: APP_SSL_CHILECOMPRA
  required: true
  